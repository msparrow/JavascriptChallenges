[
  {"term":"Variable","definition":"A named container for storing data values. In JavaScript use let or const (prefer const by default).","example":"// Using let and const\nconst pi = 3.14159; // cannot be reassigned\nlet count = 0;      // can change over time\ncount += 1; // 1"},
  {"term":"Function","definition":"A reusable block of code defined with function, arrow functions, or class methods.","example":"// Function declarations and arrows\nfunction add(a, b) {\n  return a + b;\n}\n\nconst multiply = (a, b) => a * b;\n// add(2,3) -> 5, multiply(2,3) -> 6"},
  {"term":"Array","definition":"An ordered list-like object. Indexed starting at 0. Common methods include map, filter, reduce.","example":"// Array basics\nconst nums = [1,2,3];\nconst doubled = nums.map(n => n*2); // [2,4,6]\nconst evens = nums.filter(n => n%2===0); // [2]\nconst sum = nums.reduce((a,b)=>a+b,0); // 6"},
  {"term":"Object","definition":"A collection of key-value pairs. Keys are strings or symbols; values can be any type.","example":"// Object literal and property access\nconst user = { name: 'Ana', age: 29 };\nuser.email = 'ana@example.com';\n// user.name -> 'Ana'"},
  {"term":"Boolean","definition":"A logical value: true or false.","example":"// Booleans in conditions\nconst isReady = true;\nif (isReady) {\n  // do something\n}"},
  {"term":"String","definition":"A sequence of characters. Immutable in JavaScript.","example":"// Template literals\nconst name = 'Sam';\nconst msg = `Hello, ${name}!`; // Hello, Sam!"},
  {"term":"Number","definition":"A double-precision floating point. Includes integers and floats (NaN and Infinity are special values).","example":"// Numeric operations\nconst x = 0.1 + 0.2; // 0.30000000000000004\nNumber.isNaN(NaN); // true"},
  {"term":"Null","definition":"An intentional absence of any object value.","example":"// null often represents 'no value'\nconst result = null;"},
  {"term":"Undefined","definition":"A variable that has not been assigned a value (or not declared).","example":"let x;\n// x is undefined"},
  {"term":"Scope","definition":"The current context of execution in which values and expressions are visible (function, block, module).","example":"// Block scope with let\n{\n  let scoped = 42;\n}\n// scoped is not accessible here"},
  {"term":"Closure","definition":"A function together with its lexical environment; allows a function to access variables from an enclosing scope.","example":"function makeCounter() {\n  let c = 0;\n  return () => ++c; // closes over c\n}\nconst next = makeCounter();\n// next() -> 1, next() -> 2"},
  {"term":"Hoisting","definition":"JavaScript's behavior of moving declarations (not initializations) to the top of their scope at compile time.","example":"// Function declarations are hoisted\nhoisted(); // works\nfunction hoisted(){ console.log('hi'); }"},
  {"term":"Prototype","definition":"The object that provides inheritance for another object. Functions have a prototype used when created with new.","example":"function Person(name){ this.name = name; }\nPerson.prototype.greet = function(){ return 'Hi ' + this.name; }\nnew Person('Ana').greet(); // 'Hi Ana'"},
  {"term":"Promise","definition":"An object representing the eventual completion or failure of an asynchronous operation.","example":"// Promise and then/catch\nconst p = fetch('/data.json');\np.then(r => r.json()).then(console.log).catch(console.error);"},
  {"term":"Async/Await","definition":"Syntax sugar over Promises to write asynchronous code in a synchronous style.","example":"async function load(){\n  try {\n    const res = await fetch('/data.json');\n    const data = await res.json();\n    console.log(data);\n  } catch (e) {\n    console.error(e);\n  }\n}"},
  {"term":"Event Loop","definition":"The mechanism that handles the execution of multiple pieces of code over time, including callbacks and microtasks.","example":"// Microtask vs macrotask demo\nconsole.log('A');\nqueueMicrotask(() => console.log('micro'));\nsetTimeout(() => console.log('macro'));\nconsole.log('B'); // A, B, micro, macro"},
  {"term":"Strict Mode","definition":"A restricted variant of JavaScript that eliminates some silent errors and improves optimizations. Use 'use strict'.","example":"'use strict';\n// Now some sloppy behaviors throw errors"},
  {"term":"Type Coercion","definition":"Automatic or implicit conversion of values from one type to another.","example":"// == allows coercion, === does not\n0 == false;  // true\n0 === false; // false"},
  {"term":"Equality (===)","definition":"=== compares without coercion (preferred).","example":"// Prefer === over ==\n'5' === 5; // false"},
  {"term":"Destructuring","definition":"A syntax to extract values from arrays or properties from objects into distinct variables.","example":"const user = { id: 1, name: 'A' };\nconst { id, name } = user;\nconst [a,b] = [10,20];"},
  {"term":"Spread Operator","definition":"... expands iterables into individual elements or copies enumerable properties.","example":"const a = [1,2];\nconst b = [...a, 3]; // [1,2,3]\nconst c = { x:1, ...{ y:2 } };"},
  {"term":"Rest Parameters","definition":"... in function parameters collects remaining arguments into an array.","example":"function sum(...nums){ return nums.reduce((a,b)=>a+b,0); }\nsum(1,2,3); // 6"},
  {"term":"Map","definition":"A key-value collection that preserves insertion order and accepts any key type.","example":"const m = new Map();\nconst objKey = {};\nm.set(objKey, 123);\nm.get(objKey); // 123"},
  {"term":"Set","definition":"A collection of unique values, preserving insertion order.","example":"const s = new Set([1,2,2,3]); // {1,2,3}\ns.has(2); // true"},
  {"term":"Currying","definition":"Transforming a function with multiple arguments into a sequence of functions each with a single argument.","example":"const add = a => b => a + b;\nadd(2)(3); // 5"},
  {"term":"Debounce","definition":"Delay invoking a function until after a wait time has elapsed since the last invocation.","example":"function debounce(fn, wait){\n  let t;\n  return (...args)=>{\n    clearTimeout(t);\n    t = setTimeout(()=>fn(...args), wait);\n  };\n}\n// const onInput = debounce(handler, 300);"},
  {"term":"Throttle","definition":"Ensure a function is invoked at most once per specified time interval.","example":"function throttle(fn, wait){\n  let last = 0;\n  return (...args)=>{\n    const now = Date.now();\n    if(now - last >= wait){\n      last = now;\n      fn(...args);\n    }\n  };\n}"},
  {"term":"IIFE","definition":"Immediately Invoked Function Expression: a function executed as soon as it is defined.","example":"(function(){\n  // immediately executed\n})();"},
  {"term":"Module","definition":"A file or collection of code with its own scope that can export and import values.","example":"// ES modules\n// utils.js\nexport const twice = x => x*2;\n// main.js\n// import { twice } from './utils.js';"},
  {"term":"Tree Shaking","definition":"A build optimization that removes unused code from final bundles.","example":"// Unused exports can be removed in production builds\nexport const used = 1;\nexport const unused = 2;"},
  {"term":"Immutability","definition":"Not modifying existing data structures; instead, creating new ones when changes are needed.","example":"const state = { a: 1 };\nconst next = { ...state, a: 2 }; // new object"}
]
